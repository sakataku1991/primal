name: Code review by AI (PR-Agent)

# ジョブの実行タイミング
on:
  pull_request:
    # opened: PRが新たに作成された時
    # edited: PRの内容が編集された時
    # synchronize: PRにコミットが追加された時
    # ready_for_review: PRがDraftからOpenに変更された時
    types: [opened, synchronize, ready_for_review]

  issue_comment:
    # created: コメントが新たに投稿された時
    # edited: コメントの内容が編集された時
    # deleted: コメントが削除された時
    types: [created, edited]

# このジョブの権限の設定
permissions:
  pull-requests: write
  issues: write
  contents: write

jobs:
  pr_agent_job:
    name: Run pr agent on every pull request, respond to user comments

    # 以下の条件のいずれかに合致する場合はジョブの実行をスキップする
    # - PRの作成者がDependabotの時
    # - PRの状態がDraftの時
    if: ${{ github.actor != 'dependabot[bot]' && github.event.pull_request.draft == false }}

    # Ubuntuの最新バージョンでこのジョブを実行する
    runs-on: ubuntu-latest

    # 何らかのエラーによりジョブが完了しないケースに備えてタイムアウトを設定している
    # ※デフォルトの最大実行時間は360分（6時間）とのこと
    # DOC: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    timeout-minutes: 10

    steps:
      - name: PR Agent action step
        id: pragent
        uses: Codium-ai/pr-agent@main
        env:
          # キーの設定
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # 使用するAIモデル
          config.model: 'gpt-4o-2024-05-13'

          # PR-Agentの各機能の有効化
          github_action_config.auto_review: "true"
          github_action_config.auto_describe: "true"
          github_action_config.auto_improve: "true"

          ## 各機能の詳細設定

          # PRの要約（`describe`）
          pr_description.extra_instructions: >-
            必ず日本語で回答してください。

            あなたは最新版の Ruby や Rails, TypeScript, TailwindCSS, Vue.js, Nuxt.js, Jotai, Jest, Playwright, Storybook, Docker, AWS, Terraform に精通した Web アプリケーションエンジニアです。

            タイトルに次のいずれかのPrefixを付けてください。
            `feat:`, `fix:`, `perf:`, `refactor:`, `test:`, `chore:`, `ci:`, `docs:` etc

          # PRのレビュー（`review`）
          pr_reviewer.require_security_review: true  # セキュリティに関するレビューを有効化する
          pr_reviewer.num_code_suggestions: 4  # 提案されるコードの数
          pr_reviewer.inline_code_comments: true  # suggestion機能を使い、差分とセットで改善コードを提案する
          pr_reviewer.extra_instructions: >-
            必ず日本語で回答してください。

            あなたは最新版の Ruby や Rails, TypeScript, TailwindCSS, React, Next.js, Pinia, Docker, AWS, Terraform に精通した Web アプリケーションエンジニアです。

            渡されたコードについて改善点を見つけ、変更する理由を説明したうえで、変更後のコード例を示してください。
            改善点がない場合には絶対にコメントをしないでください。

            コメントをする場合は、以下の原則に従ってコメントしてください。
            - URLなどの構造化テキストを文字列結合で作ってはいけない
            - URLなどの構造化テキストを置換でいじってはいけない
            - 構造化テキスト用のオブジェクトまたはライブラリを使ってください
            - 誤解を招いたり、実態を正確に表していない命名があるか
            - 適度に変数を定義し自己ドキュメントされているか
            - 冗長な書き方のコードがないか
            - ファイル内で @var のようなインスタンス変数しか定義していないのに var のような変数名を使っていないか、またはその逆
            - N+1問題（N+1 query problem）を引き起こす箇所
            - 読んで理解が難しい箇所にコメントが適切にされているか
            - コメントの内容は日本語として読んでわかりやすく、簡潔に説明できているか
            - 理解の難しい複雑な条件式が作られていないか
            - 新しいメソッドを定義したときにテストコードを書いているか
            - テスト内の説明文は、テストの内容をわかりやすく適切に表しているか
            - 明らかなセキュリティの問題があるか

            誰にとっても読みやすいコードになるよう、改善点を見つけたら積極的にレビューしてください。
            あなたに渡されるコードは一部分であるため、未定義のメソッドやクラスなどの指摘については消極的にしてください。

          # PRの改善方法の提案（`improve`）
          pr_code_suggestions.num_code_suggestions: 4  # 提案されるコードの数
          pr_code_suggestions.extra_instructions: >-
            必ず日本語で回答してください。

            あなたは最新版の Ruby や Rails, TypeScript, TailwindCSS, React, Next.js, Jotai, Jest, Playwright, Storybook, Docker, AWS, Terraform に精通した Web アプリケーションエンジニアです。

            渡されたコードについて改善点を見つけ、変更する理由を説明したうえで、変更後のコード例を示してください。
            改善点がない場合には絶対にコメントをしないでください。

            コメントをする場合は、以下の原則に従ってコメントしてください。
            - URLなどの構造化テキストを文字列結合で作ってはいけない
            - URLなどの構造化テキストを置換でいじってはいけない
            - 構造化テキスト用のオブジェクトまたはライブラリを使ってください
            - 誤解を招いたり、実態を正確に表していない命名があるか
            - 適度に変数を定義し自己ドキュメントされているか
            - 冗長な書き方のコードがないか
            - ファイル内で @var のようなインスタンス変数しか定義していないのに var のような変数名を使っていないか、またはその逆
            - N+1問題（N+1 query problem）を引き起こす箇所
            - 読んで理解が難しい箇所にコメントが適切にされているか
            - コメントの内容は日本語として読んでわかりやすく、簡潔に説明できているか
            - 理解の難しい複雑な条件式が作られていないか
            - 新しいメソッドを定義したときにテストコードを書いているか
            - テスト内の説明文は、テストの内容をわかりやすく適切に表しているか
            - 明らかなセキュリティの問題があるか

            誰にとっても読みやすいコードになるよう、改善点を見つけたら積極的にレビューしてください。
            あなたに渡されるコードは一部分であるため、未定義のメソッドやクラスなどの指摘については消極的にしてください。
